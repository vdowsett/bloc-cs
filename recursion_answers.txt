1. Define and compare recursion and iteration.

Iterations is an algorithm that executes repeatedly until the controlling conditional statement becomes false.

Recursion is an algorithm to solve a problem by solving a smaller instance of the same problem, unless the problem is so small that we can just solve it directly. You will call the problem on itself unless your 'base case' has been met. We call this technique recursion.

2. Name five algorithms that are commonly implemented by recursion.

Fibonacci sequence, merge sort, quick sort, factorial, binary tree

3. When should you use recursion, and when should you avoid recursion? Give examples for each.

Recursion works when an algorithm can be broekn into smaller problems and when you have known base case. Like when you're calculating a factorial. 

It should be avoided when a base case is unknown and you need to iterate over a data set to evaluate an unknown end result, like trying to find the maximum value in an array of numbers.

4. Compare the recursive and iterative solutions to the three algorithms from the checkpoint (factorial, maximum, and fibonacci). What is similar, and what is different?

The recursion algorithms sets a base case that will return a result once met, and the base case is known to be reaced at some point during the execution of the method. 
The recursion problems are broken into smaller problems that calls the method on itself until the condition of the base case is met.

The iterative methods keep track of values as it itterates over the data values, and then compare it to the condition. Once the condition is met, it returns and stops running. In some instances, this is a cleaner implenttion as it will reduce runtime and complexity.

5. Given a multi-dimensional collection (such as an array) where the number of dimensions is unknown, write a recursive algorithm to count the number of items in the entire collection.

var elementCount = 0;

function countArrayElements (array) {
  if (!Array.isArray(array)) {
    elementCount ++;
  }
  for (let i = 0; i < array.length; i++) {
    countArrayElements(array[i]);
    }
	return elementCount;
}

6. A palindrome is a word or phrase whose spelling is the same either direction (e.g., racecar). Write a recursive algorithm to determine if a given word or phrase is a palindrome.

function isPalindromeRecursive(testString) {
  var testStringLength = testString.length;
  if (testStringLength === 0 || testStringLength === 1) {
    return true;
  }

  if (testString[0] === testString[testStringLength - 1]) {
    return isPalindromeRecursive(testString.slice(1, testStringLength - 1));
  }
  return false;
}

7. Google Easter Egg: Google the term "recursion". Google will prompt you with "Did you mean: recursion". Explain why this behavior exhibits properties of recursion.

 If you were to click on Googleâ€™s suggested word each time, you would be creating an infinite loop of searches where you keep googling 'recursion' therefor calling itself.