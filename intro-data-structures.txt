1.

let rideLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];
let isFound = false;

var findPersonIndex = function (rideLine, personName) {
  
  let personIndex = rideLine.indexOf(personName);
  console.log("findPersonIndex(): " + personIndex);
  return personIndex;
  
};

function newPerson(rideLine, personName) {

    rideLine.push(personName);
    console.log("newPerson() array: " + rideLine);
    console.log("newPerson() index: " + findPersonIndex(rideLine, personName));
}

function findPerson(rideLine, personName) {
  
    let personFound = rideLine.find( rider => rider === personName );
    console.log( "Person Found: " + personFound );   
  
    if (personFound === personName) {
      personIndex = findPersonIndex(rideLine, personName);
      isFound = true;
    } else {
      isFound = false;    
    }
  
    if (isFound === true) {  
      return personIndex;   
    } else { 
    console.log(personName + " not in line.");
    return personName + "Not in line";
    }
  
}

function cutPerson(rideLine, personName, personCutting) {
  
  if (findPerson(rideLine, personName) === personName) {
      personIndex = findPersonIndex(rideLine, personName);
  }
  
  rideLine.splice( personIndex, 0, personCutting );
  console.log(rideLine);
  
}

function deletePerson(rideLine, personName) {
  
  let newArray = rideLine.filter( name => name != personName );
  console.log(newArray);
  return newArray;
  
}

findPersonIndex(rideLine, "Mike");
newPerson(rideLine, "Mary");
findPerson(rideLine, "Josh");
findPerson(rideLine, "Emily");
cutPerson(rideLine, "Vivian", "Melissa");
deletePerson(rideLine, "Patrick");

2. Real world example of data model:

The DMV uses a queue system to allow people to check in and receive a ticket holding their place in line.


3. For the queue at the DMV it would be very similar to the amusement park ride to add and remove people, however with this system it's first in, and first out. there isn't the option to cut the line!

